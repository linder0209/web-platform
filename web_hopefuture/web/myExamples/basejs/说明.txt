1、javascript中有5中基本数据类型，分别为：Undefined、Null、Number、Boolean、String
Undefined数据类型只有一个值：undefined；Null数据类型也只有一个值：null；Boolean数据类型有两个值：true和false

2、typeof是一元运算符，后跟变量的名称，返回的类型有：undefined、number、boolean、string和object

3、javascript中有三种强制转换：Boolean(value)、Number(value)、String(value)
与 new Boolean(value)、new Number(value)、new String(value)是不一样的，后者是定义一个对象，前者是强制转换为javascript的基本数据类型

代码：

//强制类型转换
var a = Boolean('123'),
    b = Number('123'),
    c = String('123');
    
console.info(a);
console.info(b);
console.info(c);

console.info(typeof a);
console.info(typeof b);
console.info(typeof c);

//对象的定义
var a1 = new Boolean('123'),
    b1 = new Number('123'),
    c1 = new String('123');
    
console.info(typeof a1);
console.info(typeof b1);
console.info(typeof c1);

4、在javascript中有的对象是可以枚举的，而有的是不可以枚举的。可以利用方法propertyIsEnumerable('proName')来判断，
propertyIsEnumerable 属性不考虑原型链中的对象。

代码：

var o = new Object();//不能用for...in 来枚举的

//window可以枚举的
for(var a in window){
	console.info(a);
}

var a1 = {name:'zhangsan',age:23};
a1.prototype = {proName:'proName'};

for(var a in a1){
	console.info(a);//name,age,prototype
}
console.info(a1.propertyIsEnumerable('proName'));//false，不考虑原型链中的对象
console.info(a1.propertyIsEnumerable('name'));//true

5、对于数组Array中的sort方法来说，它会先把待排序的内容转换为字符串（调用toString()方法），然后再按字符串来进行排序

arrayobj.sort(sortfunction)

如果为 sortfunction 参数提供了一个函数，那么该函数必须返回下列值之一： 

负值，如果所传递的第一个参数比第二个参数小。 
零，如果两个参数相等。 
正值，如果第一个参数比第二个参数大。 

代码：

var arr = [1,3,25];
console.info(arr.sort());//[1,25,3]

要想按照某一规则进行排序，用户必须编写排序函数

代码：

var arr = [1,3,25];
//升序排序
var compare = function(val1,val2){
	var temp1 = parseFloat(val1),
		temp2 = parseFloat(val2);
	if(temp1 < temp2){
		return -1;
	}else if(temp1 == temp2){
		return 0;
	}else{
		return 1;
	}
};
console.info(arr.sort(compare));//[1,3,25]

6、javascript中定义对象的几种方式

a、基于已有对象来扩充其属性和方法

代码：

var o = {};
o.name = '张三';
o.sayName = function(name){
  this.name = name;
};
o.sayName('李四');
console.info(o.name);

b、工厂方式创建对象

代码：

function createObject(){
	var object = {};
	object.userName = 'zhangsan';
	object.password = '123';
	
	object.get = function(){
		return this.userName + ' ' + this.password; 
	}
	return object;
}

var obj1 = createObject();
var obj2 = createObject();
console.info(obj1.get());


//带参数的构造函数
function createObject(userName, password){
	var object = {};
	object.userName = userName;
	object.password = password;
	
	object.get = function(){
		return this.userName + ' ' + this.password; 
	}
	return object;
}

var obj1 = createObject('zhangsan', '123');
var obj2 = createObject('lisi', '234');
console.info(obj1.get());
console.info(obj2.get());

//多个实例公用一个方法，减少内存的占有

代码：
var get = function(){
	return this.userName + ' ' + this.password; 
};

function createObject(userName, password){
	var object = {};
	object.userName = userName;
	object.password = password;
	
	object.get = get;
	return object;
}

var obj1 = createObject('zhangsan', '123');
var obj2 = createObject('lisi', '234');
console.info(obj1.get());
console.info(obj2.get());

c、基于构造函数创建对象

代码：

//可以在构造函数中传递参数
function Person(userName, password){
	this.userName = userName;
	this.password = password;
	
	this.getInfo = function(){
		console.info(this.userName + '  ' + this.password);
	}
}

var person1 = new Person('zhangsan', '456');
person1.getInfo();


d、基于原型（prototype）方式

代码：

function Person(){}

Person.prototype.userName = [];
Person.prototype.password = '123';
Person.prototype.getInfo = function(){
	console.info(this.userName + '  ' + this.password);
} 

var person1 = new Person(),
	person2 = new Person();
	
person1.userName.push('zhangshan');
person2.userName.push('lisi');
person1.password = '123';
person2.password = '234';
person1.getInfo();//zhangshan,lisi 123
person2.getInfo();//zhangshan,lisi 234
//以上执行结果，userName是对象，而password是基本数据类型；分别代表引用传递和值传递

如果使用原型方式对象，那么生成的所有对象会共享原型属性，这样一个对象的属性改变了也会反映到其他对象中，说到底还是对象引用的问题


e、使用原型+构造函数定义对象
对象之间的属性互不干扰，对象之间可以共享方法

/**
 * @param userName {Array} 
 * @param password {String} 
**/
function Person(userName, password){
	this.userName = userName;
	this.password = password;
}

Person.prototype.getInfo = function(){
	console.info(this.userName + '  ' + this.password);
} 

var person1 = new Person(['zhangshan','lisi'],'123');
var person2 = new Person(['mawu','houliu'],'33123');
person1.getInfo();
person2.getInfo();


f、动态原型方式来创建对象

代码：

function Person(userName, password){
	this.userName = userName;
	this.password = password;
	
	if(typeof Person.flag == 'undefined'){
		Person.prototype.getInfo = function(){
			console.info(this.userName + ', ' + this.password);
		}
		Person.flag = true;
	}
}
var person1 = new Person('zhangshan','123');
var person2 = new Person('mawu','33123');
person1.getInfo();
person2.getInfo();


7、javascript中的继承

a、对象冒充

代码：

function Parent(userName){
	this.userName = userName;
	this.sayHello = function(){
		console.debug(this.userName);
	}
}

function Child(userName, password){
	//此处this.method 指向 Parent
	this.method = Parent;
	this.method(userName);//执行Parent构造函数，此时this是Child，故可以把Parent中的方法和属性赋值到Child中
	delete this.method;
	
	//不能用以下来实现
	//Parent(userName);//没有this对象
	
	
	//以上是继承，下面实现其他方法
	this.password = password;
	
	this.sayPassword = function(){
		console.debug(this.password);
	}
}

var person1 = new Child('xiaohai','123');
person1.sayHello();
person1.sayPassword();


b、利用call方法实现（也可用apply）
call是Function对象中的方法，定义的每一个函数都拥有该方法，可以通过函数名来调用call方法
call方法中第一个参数是指向this的对象，从第二个参数开始，是函数所传的参数


代码：

function Parent(userName){
	this.userName = userName;
	this.sayHello = function(){
		console.debug(this.userName);
	}
}

function Child(userName, password){
	Parent.call(this, userName);
	
	//或者利用apply，注意第二个参数是数组形式
	Parent.apply(this.[userName]);
	
	//以上是继承，下面实现其他方法
	this.password = password;
	
	this.sayPassword = function(){
		console.debug(this.password);
	}
}

var person1 = new Child('xiaohai','123');
person1.sayHello();
person1.sayPassword();

c、原型链方式（prototype chain）（无法实现传参），而且只能继承prototype上的属性和方法，而父类静态方法不会被继承

代码：

function Parent(){}
Parent.staticM = function(){
    console.info('This is a static method!');
};
Parent.prototype.hello = 'hello';
Parent.prototype.sayHello = function(){
	console.info(this.hello);
};

function Child(){}
//让子类的prototype指向父类的实例，这样父类的方法就会传递给子类
Child.prototype = new Parent();
//上面的语句会使Child.prototype.constructor 指向 Parent，所以还需以下语句来修正
Child.prototype.constructor = Child;

//扩展子类的方法和属性
Child.prototype.world = 'world';
Child.prototype.sayWorld = function(){
	console.error(this.world);
}
var child = new Child();
child.sayHello();
child.sayWorld();
child.staticM();//会报错

d、混合模式（推荐使用这种）

function Parent(hello){
	this.hello = hello;
}

Parent.prototype.sayHello = function(){
	alert(this.hello);
}

function Child(hello, world){
	Parent.call(this,hello);
	this.world = world;
}

Child.prototype = new Parent();
Child.prototype.constructor = Child;

Child.prototype.sayWorld = function(){
	alert(this.world);
}

var child = new Child('hello', 'world!');
child.sayHello();
child.sayWorld();

alert(Child.prototype.constructor);


//下面是更通用的原型继承
function Extend(subFn, superFn) {
	subFn.prototype = new superFn();
	subFn.prototype.constructor = subFn;
}

//父类
function Animal() {
	this.say1 = function() {
		alert("Animal");
	}
}

//原型方法和属性
//Animal.prototype

//子类
function Tiger() {
	this.say2 = function() {
		alert("Tiger");
	}

}
//原型方法和属性
//Tiger.prototype

//继承应用
Extend(Tiger, Animal);
var tiger = new Tiger();
tiger.say1();// "Animal"
tiger.say2();// "Tiger"

另外说一下 instanceof的方法

如果子类继承父类，则 instanceof 对于父类和子类都返回true，如

child instanceof Child

child instanceof Parent

都返回true










































